version: 2.1
executors:
  node8:
    docker:
    - image: circleci/node:8
    environment:
      NPM_CONFIG_PREFIX: ~/.npm-global

commands:
  setup:
    steps:
    - checkout
    # - restore_cache:
    #     keys:
    #     - v1-dependencies-{{ arch }}-{{ checksum "package-lock.json" }}
    - run:
        name: install npm 6.9.0
        command: sudo npm -g install npm@6.9.0
    - run:
        name: Installing Dependencies
        command: npm ci
    - run:
        name: Validate orbs
        command: |
            curl -fLSs https://circle.ci/cli | DESTDIR=/home/circleci bash
            find . -name orb.yml -print0 | xargs -0 -I% /home/circleci/circleci orb validate %
    # - save_cache:
    #     paths:
    #     - node_modules
    #     key: v1-dependencies-{{ arch }}-{{ checksum "package-lock.json" }}
    - run:
        name: prepare test git user
        command: git config --global user.email "circleci@example.com" && git config --global user.name "CircleCi Build"

jobs:
  build:
    executor: node8

    steps:
    - setup
    - run: mkdir junit
    - run:
        name: Lint
        command: npm run lint

    - run:
        name: Getting Code Coverage
        command: npm run test-ci

    - store_test_results:
        path: junit

    - store_artifacts:
        path: junit

  release:
    executor: node8

    steps:
      - setup
      - run:
          name: revert changes to package-lock.json
          command: git checkout -- package-lock.json

      - run:
          name: Check for Updated Package name
          command: node -e "if (require('./package.json').name=='@adobe/helix-library') { process.exit(1) };"

      - run:
          name: Semantic Orb Release
          command: |
              # analyze commits to find out if any orbs need to be updated
              npm run semantic-release --dry-run --analyze-commits | tee /tmp/commit-analysis.log
              segment=$(cat /tmp/commit-analysis.log | sed '/^.* complete: */!d; s///;q' | sed 's/^\(.*\) release/\1/')
              if [[ "${segment}" =~ ^(major|minor|patch)$ ]]; then
                echo "Commit analysis suggests ${segment} release, identifying affected orbs"
                for path in .circleci/orbs/*
                do
                  if [[ "${path}" =~ .*/README.md$ ]]; then
                    continue
                  fi
                  echo "Orb ${path}"
                  orb=$(basename ${path})
                  # run circleci first to check for updates
                  circleci > /dev/null
                  # compare published orb to local source
                  circleci orb source adobe/${orb} > /tmp/${orb}-pub.yml
                  diff -B /tmp/${orb}-pub.yml .circleci/orbs/${orb}/orb.yml | tee /tmp/${orb}-diff.txt
                  if [ "$(cat /tmp/${orb}-diff.txt)" != "" ]; then
                    echo "  Source changed, proceeding with ${segment} release"
                    circleci orb increment .circleci/orbs/${orb}/orb.yml adobe/helix-post-deploy ${segment}
                  else
                    echo "  Source unchanged, skipping release"
                  fi
                done
              else
                echo "Commit analysis suggests skipping release"
              fi

      - run:
          name: Semantic Release
          command: npm run semantic-release

workflows:
  version: 2
  build:
    jobs:
    - build
    # the release jobs needs a $NPM_TOKEN and $GH_TOKEN environment to be setup
    - release:
        requires:
        - build
        filters:
          branches:
            # rename to `master` once the tokens have been setup
            only: master
