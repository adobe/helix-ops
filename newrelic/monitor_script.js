/*
 * Copyright 2019 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
/* eslint-disable no-console */
/* global $http $util $secure */
// This is an autogenerated file, changes will be overwritten

const assert = require('assert');

$http.get('$$$URL$$$',
  // Callback
  (err, response, body) => {
    const status = JSON.parse(body);
    Object.keys(status).forEach((v) => {
      if (['status', 'error', 'process', 'version', 'response_time'].indexOf(v) === -1) {
        $util.insights.set(v, parseInt(status[v], 10));
      }
    });
    $util.insights.set('status', status.status);
    ['x-openwhisk-activation-id', 'x-request-id', 'x-version'].forEach((h) => {
      $util.insights.set(h, response.headers[h]);
    });
    if (status.error) {
      $util.insights.set('errorStatus', status.error.statuscode);
      $util.insights.set('errorURL', status.error.url);
    }
    if (status.status !== 'OK') {
      console.error(body);
    }
    // retrieve activation details
    const id = response.headers['x-openwhisk-activation-id'];
    if (id) {
      $http.get({
        url: `https://adobeioruntime.net/api/v1/namespaces/_/activations/${id}`,
        headers: {
          Authorization: `Basic ${Buffer.from($secure.WSK_AUTH_$$$NS$$$).toString('base64')}`,
        },
        json: true,
      },
      // Callback
      (e, details) => {
        if (e) {
          console.log('Failed to retrieve activation details:', e);
          return;
        }
        try {
          console.info('Activation details:', JSON.stringify(details, null, 2));
          $util.insights.set('activation_duration', details.body.duration);
          $util.insights.set('wsk_overhead', details.body.duration - status.response_time);
          details.body.annotations.filter((ann) => ann.key.toLowerCase().indexOf('time') >= 0).forEach((ann) => {
            $util.insights.set(`activation_${ann.key}`, ann.value);
          });
        } catch (ie) {
          console.error('Error storing insights:', ie);
        }
      });
    }
    assert.equal(status.status, 'OK', `Expected an OK health check status, got: ${status.status}`);
    assert.equal(response.statusCode, 200, `Expected a 200 OK response, got ${response.statusCode}`);
  });
